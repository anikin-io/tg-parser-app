import asyncio
import os
from datetime import timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import FSInputFile, ReplyKeyboardRemove


class NotificationService:
    def __init__(self, token: str, admin_chat_id: int):
        self.bot = Bot(
            token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        # self.dp = Dispatcher()
        self.admin_chat_id = admin_chat_id
        self.notifications_enabled = True

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        # self.dp.message(Command("notifications_on"))(self.notifications_on)
        # self.dp.message(Command("notifications_off"))(self.notifications_off)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
        # asyncio.create_task(self.dp.start_polling(self.bot))

    async def send_notification(self, message: str):
        if self.notifications_enabled:
            try:
                await self.bot.send_message(
                    chat_id=self.admin_chat_id,
                    text=f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã:</b>\n{message}",
                    reply_markup=ReplyKeyboardRemove(),
                )
            except Exception as e:
                print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

    # async def notifications_on(self, message: types.Message):
    #     self.notifications_enabled = True
    #     await message.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")

    # async def notifications_off(self, message: types.Message):
    #     self.notifications_enabled = False
    #     await message.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")

    async def shutdown(self):
        await self.bot.session.close()

    async def send_report_files(self, filename: str, csv_path: str, excel_path: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç CSV –∏ Excel –æ—Ç—á–µ—Ç—ã"""
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ CSV
            if os.path.exists(csv_path) and os.path.getsize(csv_path) > 0:
                csv_file = FSInputFile(csv_path, filename=f"groups_{filename}.csv")
                await self.bot.send_document(
                    chat_id=self.admin_chat_id,
                    document=csv_file,
                    caption=f"üìä CSV –æ—Ç—á–µ—Ç: {filename}",
                )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ Excel
            if os.path.exists(excel_path) and os.path.getsize(excel_path) > 0:
                excel_file = FSInputFile(excel_path, filename=f"groups_{filename}.xlsx")
                await self.bot.send_document(
                    chat_id=self.admin_chat_id,
                    document=excel_file,
                    caption=f"üìà Excel –æ—Ç—á–µ—Ç: {filename}",
                )

        except Exception as e:
            await self.send_notification(f"üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")

    async def send_parsing_summary(
        self, time_str: str, status: str, found_groups_len: int
    ):
        status_emoji = "‚úÖ" if status == "completed" else "‚ùå"

        message = (
            f"{status_emoji} <b>–ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø {'–∑–∞–≤–µ—Ä—à–µ–Ω' if status == 'completed' else '–ø—Ä–µ—Ä–≤–∞–Ω'}</b>\n"
            f"‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{time_str}</code>\n"
            f"üìä –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: <code>{found_groups_len}</code>\n"
        )
        await self.send_notification(message)
