import asyncio
import itertools
import json
import random

from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.functions.contacts import SearchRequest
from telethon.tl.types import Channel, ChannelForbidden
from telethon.errors import FloodWaitError


class ParsChatListUseCase:
    def __init__(
        self, client_service, account_repo, message_utils, csv_repo, excel_repo
    ):
        self.client_service = client_service
        self.account_repo = account_repo
        self.message_utils = message_utils
        self.csv_repo = csv_repo
        self.excel_repo = excel_repo

    async def check_chat_activity(
        self, client, chat, check_depth=15, min_messages=5
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤ —á–∞—Ç–µ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º min_messages –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –≥–ª—É–±–∏–Ω–µ check_depth
        """
        user_messages = 0
        try:
            async for message in client.iter_messages(chat, limit=check_depth):
                if not self.message_utils.is_system_message(message):
                    user_messages += 1
                    if user_messages >= min_messages:
                        return True
            return user_messages >= min_messages
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞ {chat.title}: {str(e)}")
            return False

    async def search_global_groups(self, phone: str, filename: str):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        base_keywords = ["—Ä–∞–±–æ—Ç–∞", "–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞", "—Ö–∞–ª—Ç—É—Ä–∞", "–≤–∞–∫–∞–Ω—Å–∏–∏", "–∏—â—É —Ä–∞–±–æ—Ç—É", "–∏—â—É –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É", "–≤–∞—Ö—Ç–∞", "—à–∞–±–∞—à–∫–∞"]
        suffixes = [
            "—Ç—É–ª–∞", "–±—Ä—è–Ω—Å–∫", "—Ö–∏–º–∫–∏", "—Å—É—Ä–≥—É—Ç", "–∫—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫", "–ø–µ–Ω–∑–∞", "—Å–º–æ–ª–µ–Ω—Å–∫", "–Ω–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫",
            "–º–æ—Å–∫–≤–∞", "–º—Å–∫", "—Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ—Ä—Å–∫", "—Ç–≤–µ—Ä—å", "–æ–¥–∏–Ω—Ü–æ–≤–æ", "—â–µ—Ä–±–∏–Ω–∫–∞", "–ª–∏–ø–µ—Ü–∫", "—Å–æ—á–∏", "–∫–∞–ª—É–≥–∞",
            "–∫–∞–∑–∞–Ω—å", "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥", "–ø–∏—Ç–µ—Ä", "—Å–ø–±", "–≤–æ—Ä–æ–Ω–µ–∂", "—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É", "—Ä–æ—Å—Ç–æ–≤", "—É–ª—å—è–Ω–æ–≤—Å–∫",
            "–±–∞—Ä–Ω–∞—É–ª", "—Ç–æ–ª—å—è—Ç—Ç–∏", "–º—É—Ä–º–∞–Ω—Å–∫", "–∫–∏—Ä–æ–≤", "–≤—è—Ç–∫–∞", "–º—ã—Ç–∏—â–∏", "–æ–º—Å–∫", "—Ä—è–∑–∞–Ω—å", 
            "–∞—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫", "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–Ω—Å–∫", "–Ω–æ–≤–æ—Å–∏–±", "–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥", "–Ω–∏–∂–Ω–∏–π", "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥","–µ–∫–±", "–º–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–º–æ",
            "–¥–ª—è –º–∏–≥—Ä–∞–Ω—Ç–æ–≤", "–¥–ª—è –ø—Ä–∏–µ–∑—à–∏—Ö", "–¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
        ]

        exclude_keywords = ["–¥—Ä–æ–ø—ã", "–∫–∞–∑–∏–Ω–æ", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–∫—Ä–∏–ø—Ç–∞", "–ø–∏—Ä–∞–º–∏–¥–∞", "—Å—Ç–∞–≤–∫–∏", "–∑–∞–∫–ª–∞–¥–∫–∏", "–±–∞–Ω–∫–∏"] # –ú–∏–Ω—É—Å-—Å–ª–æ–≤–∞
        min_members = 600
        MAX_TIME_WAITING = 900

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        queries = list(
            {
                f"{word} {suffix}".strip().lower()
                for word, suffix in itertools.product(base_keywords, suffixes)
            }
        )

        found_groups = {}

        client = await self.client_service.authenticate_and_set_status(phone)
        try:
            for query in queries:
                print(f"üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: '{query}'")
                result = await client(SearchRequest(q=query, limit=100))

                for chat in result.chats:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
                        if (
                            isinstance(chat, Channel)
                            and chat.megagroup
                            and not isinstance(chat, ChannelForbidden)
                            and chat.username
                        ):

                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—Ä–∞–≤–∞
                            if (
                                (chat.id in found_groups)
                                or chat.default_banned_rights.send_messages
                                or chat.join_request
                            ):
                                continue

                            try:
                                full_chat = await client.get_entity(chat.username)

                                if any(kw in full_chat.title.lower() for kw in exclude_keywords):
                                    continue

                                chat_full_info = await client(
                                    GetFullChannelRequest(channel=full_chat)
                                )
                                if (
                                    chat_full_info.full_chat.participants_count
                                    <= min_members
                                ):
                                    continue

                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏
                                title_lower = full_chat.title.lower()
                                about_lower = (
                                    chat_full_info.full_chat.about.lower() or "None"
                                )
                                # if any(
                                #     keyword in title_lower or keyword in about_lower
                                #     for keyword in exclude_keywords
                                # ):
                                #     print(
                                #         f"üö´ –ß–∞—Ç {full_chat.title} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –ø–æ –º–∏–Ω—É—Å-—Å–ª–æ–≤—É"
                                #     )
                                #     continue

                                # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–≤—à–µ–µ –º–∏–Ω—É—Å-—Å–ª–æ–≤–æ
                                excluded_keyword = None
                                for keyword in exclude_keywords:
                                    if keyword in title_lower or keyword in about_lower:
                                        excluded_keyword = keyword
                                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
                                if excluded_keyword is not None:
                                    print(f"üö´ –ß–∞—Ç {full_chat.title} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –ø–æ –º–∏–Ω—É—Å-—Å–ª–æ–≤—É: {excluded_keyword}")
                                    continue

                                # if not await self.check_chat_activity(
                                #     client, full_chat, 30, 10
                                # ):
                                #     print(
                                #         f"üö´ –ß–∞—Ç {full_chat.title} –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
                                #     )
                                #     continue
                            except FloodWaitError as e:
                                if e.seconds > MAX_TIME_WAITING:
                                    raise
                                else:
                                    print(f"‚è≥ –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫...")
                                    await asyncio.sleep(e.seconds)
                                    continue
                            except Exception as e:
                                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {chat.username}: {str(e)}")
                                continue

                            found_groups[full_chat.id] = {
                                "title": full_chat.title,
                                "username": full_chat.username,
                                "members": chat_full_info.full_chat.participants_count,
                                "link": f"https://t.me/{full_chat.username}",
                                "id": full_chat.id,
                                "about": chat_full_info.full_chat.about or "‚Äî‚Äî",
                            }
                            print(
                                f"‚úÖ –ù–∞–π–¥–µ–Ω–∞: {full_chat.title} ({chat_full_info.full_chat.participants_count} —É—á–∞—Å—Ç–Ω–∏–∫–∞(-–æ–≤))"
                            )
                        await asyncio.sleep(random.uniform(1, 2))

                await asyncio.sleep(random.uniform(10, 20))

        except FloodWaitError as e:
                if e.seconds > MAX_TIME_WAITING:
                    print("üö¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫.! –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
                    if found_groups:
                        self.csv_repo.save_groups_to_csv(list(found_groups.values()), filename)
                        self.excel_repo.save_groups_to_excel(list(found_groups.values()), filename)
                    
                    await self.client_service.safe_disconnect_with_pause(client, phone)
                    return len(found_groups) 
        except Exception as e:
                print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                return None
        finally:
            if found_groups:
                self.csv_repo.save_groups_to_csv(list(found_groups.values()), filename)
                self.excel_repo.save_groups_to_excel(list(found_groups.values()), filename)
        
        await self.client_service.safe_disconnect(client, phone)
        return len(found_groups)
