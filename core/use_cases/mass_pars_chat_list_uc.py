import asyncio
import itertools
import random
import sys
import time
from contextlib import AsyncExitStack
from datetime import timedelta
from typing import Dict, List, Optional

from telethon import TelegramClient
from telethon.errors import FloodWaitError, PeerFloodError
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.functions.contacts import SearchRequest
from telethon.tl.types import Channel, ChannelForbidden

from config.chats_keywords_config import (
    BASE_KEYWORDS,
    EXCLUDE_KEYWORDS,
    MIN_MEMBERS,
    SUFFIXES,
)
from config.statuses import STATUS_FREE, STATUS_ON_PAUSE, STATUS_SPAM_BLOCK


class MassParseChatListUseCase:
    def __init__(
        self,
        client_service,
        account_repo,
        csv_repo,
        excel_repo,
        message_utils,
        randomized_utils,
        notification_service,
    ):
        self.client_service = client_service
        self.account_repo = account_repo
        self.csv_repo = csv_repo
        self.excel_repo = excel_repo
        self.message_utils = message_utils
        self.randomized_utils = randomized_utils
        self.notifier = notification_service

        self.active_accounts: Dict[str, TelegramClient] = {}
        self.search_queue = asyncio.Queue()
        self.found_groups = {}
        self.lock = asyncio.Lock()

    MAX_TIME_WAITING = 900

    async def initialize(self, num_accounts: int):
        free_accounts = self.account_repo.get_free_accounts()[:num_accounts]
        if not free_accounts:
            raise ValueError("[!] –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        tasks = [self._authenticate_account(acc.phone) for acc in free_accounts]
        await asyncio.gather(*tasks, return_exceptions=True)

    async def _authenticate_account(self, phone: str):
        try:
            client = await self.client_service.authenticate_and_set_status(phone)
            if client:
                self.active_accounts[phone] = client
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {phone}: {str(e)}")

    async def start_parsing(
        self,
        # base_keywords: List[str],
        # suffixes: List[str],
        # exclude_keywords: List[str],
        filename: str,
        # min_members: int,
    ):
        start_time = time.monotonic()
        parsing_status = "completed"
        try:

            queries = self._generate_queries(BASE_KEYWORDS, SUFFIXES)
            for query in queries:
                await self.search_queue.put(query)

            await self.notifier.send_notification(
                f"üöÄ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {self.search_queue.qsize()}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(self.active_accounts)}"
            )

            # –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤
            workers = [
                asyncio.create_task(
                    self._parse_worker(phone, filename, EXCLUDE_KEYWORDS, MIN_MEMBERS)
                )
                for phone in self.active_accounts.keys()
            ]

            await asyncio.gather(*workers)
        except Exception as e:
            parsing_status = "failed"
        finally:
            await self._safe_disconnect_all_accs(STATUS_FREE)

            elapsed_time = time.monotonic() - start_time
            time_str = str(timedelta(seconds=elapsed_time)).split(".")[0]
            await self.notifier.send_parsing_summary(
                time_str, parsing_status, len(self.found_groups)
            )
            await self._save_results(filename)
            await self.notifier.shutdown()

            return time_str, parsing_status, len(self.found_groups)

    async def _parse_worker(
        self, phone: str, filename: str, exclude_keywords: List[str], min_members: int
    ):
        client = self.active_accounts[phone]

        while not self.search_queue.empty():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
                if phone not in self.active_accounts:
                    print(f"[!] –ê–∫–∫–∞—É–Ω—Ç {phone} –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
                    break
                client = self.active_accounts[phone]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                if not client.is_connected():
                    print(f"[!] –ê–∫–∫–∞—É–Ω—Ç {phone} –æ—Ç–∫–ª—é—á–µ–Ω")
                    break

                query = await self.search_queue.get()

                await self._process_search_query(
                    client, phone, query, exclude_keywords, min_members
                )
                # await asyncio.sleep(self.randomized_utils.get_randomized_delay(10, 5))
                await asyncio.sleep(random.uniform(10, 20))
            except FloodWaitError as e:
                new_phone = await self._handle_flood_wait_error(phone, e, filename)
                if new_phone and new_phone != phone:
                    phone = new_phone
                    client = self.active_accounts.get(new_phone)
                    continue
                else:
                    break
            except PeerFloodError as e:
                new_phone = await self._handle_peer_flood_error(phone, e, filename)
                if new_phone and new_phone != phone:
                    phone = new_phone
                    client = self.active_accounts.get(new_phone)
                else:
                    break
            except Exception as e:
                print(f"[!] –û—à–∏–±–∫–∞ —É {phone}: {str(e)}")
                continue

    async def _process_search_query(
        self,
        client: TelegramClient,
        phone: str,
        query: str,
        exclude_keywords: List[str],
        min_members: int,
    ):
        try:
            if not client.is_connected():
                print(f"[!] –ê–∫–∫–∞—É–Ω—Ç {phone} —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω")
                return

            result = await client(SearchRequest(q=query, limit=150))
            print(f"üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: '{query}' | {phone}")
            for chat in result.chats:
                try:
                    if not await self._is_valid_chat(chat):
                        continue

                    full_chat = await client.get_entity(chat.username)
                    if any(kw in full_chat.title.lower() for kw in exclude_keywords):
                        continue

                    chat_full_info = await client(GetFullChannelRequest(full_chat))

                    if self._should_exclude_chat(
                        full_chat, chat_full_info, exclude_keywords, min_members
                    ):
                        continue

                    # if not await self.check_chat_activity(client, full_chat, 30, 10):
                    #     print(
                    #         f"üö´ –ß–∞—Ç {full_chat.title} –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
                    #     )
                    #     continue

                    async with self.lock:
                        self.found_groups[full_chat.id] = {
                            "title": full_chat.title,
                            "username": full_chat.username,
                            "members": chat_full_info.full_chat.participants_count,
                            "link": f"https://t.me/{full_chat.username}",
                            "id": full_chat.id,
                            "about": chat_full_info.full_chat.about or "‚Äî‚Äî",
                        }
                        print(
                            f"‚úÖ –ù–∞–π–¥–µ–Ω–∞: {full_chat.title} ({chat_full_info.full_chat.participants_count} —É—á–∞—Å—Ç–Ω–∏–∫–∞(-–æ–≤)) | {phone}"
                        )

                except FloodWaitError as e:
                    raise
                except PeerFloodError as e:
                    raise
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {chat.username} —É {phone}: {str(e)}")
                    continue

                await asyncio.sleep(random.uniform(1, 2))

        except FloodWaitError as e:
            raise
        except PeerFloodError as e:
            raise
        except Exception as e:
            print(f"üö® –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É {phone}: {str(e)}")

    async def _handle_flood_wait_error(
        self, phone: str, e: FloodWaitError, filename: str
    ):
        if e.seconds > self.MAX_TIME_WAITING:
            print(f"[!] –î–æ–ª–≥–∏–π FloodWait —É {phone} ({e.seconds} —Å–µ–∫.), –∑–∞–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞")
            return await self._replace_account(phone, filename, STATUS_ON_PAUSE)
        else:
            print(f"‚è≥ –ê–∫–∫–∞—É–Ω—Ç {phone} –∂–¥–µ—Ç {e.seconds} —Å–µ–∫...")
            await asyncio.sleep(e.seconds)
            return phone

    async def _handle_peer_flood_error(
        self, phone: str, e: PeerFloodError, filename: str
    ):
        print(f"[!] –ü–æ–ª—É—á–∏–ª —Å–ø–∞–º–±–ª–æ–∫ –æ—Ç Telegram | {phone}: {e.message}")
        return await self._replace_account(phone, filename, STATUS_SPAM_BLOCK)

    async def _replace_account(self, phone: str, filename: str, status: str):
        await self._safe_disconnect_account(phone, status, True)
        new_accs = self.account_repo.get_free_accounts()
        if new_accs:
            new_phone = new_accs[0].phone
            await self._authenticate_account(new_accs[0].phone)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ active_accounts
            if new_phone in self.active_accounts:
                print(f"[+] –ê–∫–∫–∞—É–Ω—Ç {new_phone} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–±–æ—Ç—É")
                return new_phone
            else:
                print(f"[!] –ê–∫–∫–∞—É–Ω—Ç {new_phone} –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–±–æ—Ç—É!")
        else:
            print(
                f"[!] –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ë–î. –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Å—Ç–∞–ª–æ—Å—å: {len(self.active_accounts)}"
            )
            if not self.active_accounts:
                # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
                await self._save_results(filename)
                print(
                    "[!] –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –¥–æ–ª–≥–æ–º –æ–∂–∏–¥–∞–Ω–∏–∏ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã..."
                )
                await self._safe_disconnect_all_accs(status)
                sys.exit(0)

        return None

    async def _save_results(self, filename: str):
        if self.found_groups:
            csv_path = self.csv_repo.save_groups_to_csv(
                list(self.found_groups.values()), filename
            )
            excel_path = self.excel_repo.save_groups_to_excel(
                list(self.found_groups.values()), filename
            )
            await self.notifier.send_report_files(filename, csv_path, excel_path)

    def _generate_queries(self, base_keywords, suffixes):
        queries = list(
            {
                f"{word} {suffix}".strip().lower()
                for word, suffix in itertools.product(base_keywords, suffixes)
            }
        )
        return queries

    def _should_exclude_chat(
        self, full_chat, chat_full_info, exclude_keywords, min_members
    ):
        if chat_full_info.full_chat.participants_count <= min_members:
            return True
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω—É—Å-—Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏
        title_lower = full_chat.title.lower()
        about_lower = chat_full_info.full_chat.about.lower() or "None"

        excluded_keyword = None
        for keyword in exclude_keywords:
            if keyword in title_lower or keyword in about_lower:
                excluded_keyword = keyword
                break
        if excluded_keyword is not None:
            print(
                f"üö´ –ß–∞—Ç {full_chat.title} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –ø–æ –º–∏–Ω—É—Å-—Å–ª–æ–≤—É: {excluded_keyword}"
            )
            return True

    async def check_chat_activity(
        self, client, chat, check_depth=15, min_messages=5
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤ —á–∞—Ç–µ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º min_messages –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –≥–ª—É–±–∏–Ω–µ check_depth
        """
        user_messages = 0
        try:
            async for message in client.iter_messages(chat, limit=check_depth):
                if not self.message_utils.is_system_message(message):
                    user_messages += 1
                    if user_messages >= min_messages:
                        return True
            return user_messages >= min_messages
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞ {chat.title}: {str(e)}")
            return False

    async def _is_valid_chat(self, chat) -> bool:
        # 1. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã (–±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
        async with self.lock:
            if chat.id in self.found_groups:
                return False

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —á–∞—Ç–∞
        if not (
            isinstance(chat, Channel)
            and chat.megagroup
            and not isinstance(chat, ChannelForbidden)
        ):
            return False

        # 3. –ü—É–±–ª–∏—á–Ω–æ—Å—Ç—å (–Ω–∞–ª–∏—á–∏–µ username)
        if not chat.username:
            return False

        # 4. –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if chat.default_banned_rights.send_messages or chat.join_request:
            return False

        return True

    async def _safe_disconnect_account(
        self, phone: str, status: Optional[str] = None, remove_from_active: bool = True
    ):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        :param phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        :param status: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        :param remove_from_active: –£–¥–∞–ª—è—Ç—å –ª–∏ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        """
        client = self.active_accounts.get(phone)

        if not client:
            print(f"[!] –ê–∫–∫–∞—É–Ω—Ç {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö")

        try:
            if client.is_connected():
                await client.disconnect()

            if status is not None:
                self.account_repo.update_status_by_phone(phone, status)

            if remove_from_active and phone in self.active_accounts:
                del self.active_accounts[phone]

            print(
                f"[‚úì] –ê–∫–∫–∞—É–Ω—Ç {phone} –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω"
                + (f", —Å—Ç–∞—Ç—É—Å: {status}" if status else "")
            )

        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è {phone}: {str(e)}")

    async def _safe_disconnect_all_accs(self, status: str):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–æ–≤

        :param status: –°—Ç–∞—Ç—É—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, STATUS_FREE)
        """
        async with AsyncExitStack() as stack:
            for phone, client in self.active_accounts.items():
                stack.push_async_callback(client.disconnect)
                if status is not None:
                    self.account_repo.update_status_by_phone(phone, status)
            print(
                "[!] –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã"
                + (f" —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞ |{status}|" if status else "")
            )
